[
{"title": "hou package", "categories": [{"category": "animation", "items": [{"class": "hou.BaseKeyframe", "summary": "Abstract base class for all keyframe class.", "functions": ["ascode(brief=false, save_keys_in_frames=false, function_name=none)  → str", "evaluatedtype()  → hou.parmdata enum value", "expression()  → str", "expressionlanguage()  → hou.exprlanguage enum value", "frame()  → double", "isexpressionlanguageset()  → bool", "isexpressionset()  → bool", "istimeset()  → bool", "setexpression(expression, language=none)", "setframe(frame)", "settime(time)", "time()  → double"]}, {"class": "hou.convertClipData()", "summary": null, "functions": []}, {"class": "hou.convertKeyframesToClipData()", "summary": null, "functions": []}, {"class": "hou.addAnimationLayer()", "summary": "Adds an Animation Layer to an existing Animation Layer Mixer.", "functions": []}, {"class": "hou.Bookmark", "summary": "Represents a Bookmark", "functions": ["name()  → str", "setname(name)", "startframe()  → int", "setstartframe(start_frame)", "endframe()  → int", "setendframe(end_frame)", "comment()  → str", "setcomment(comment)", "color()  → hou.color", "setcolor(color)", "visible()  → bool", "setvisible(visible)", "sessionid() - int"]}, {"class": "hou.Keyframe", "summary": "Class representing the default keyframe type, a numerical keyframe.", "functions": ["__init__(values)", "accel()  → double", "asjson(brief=false, save_keys_in_frames=false)  → dict", "fromjson(keyframe_dict)", "evaluatedtype()  → hou.parmdata enum value", "inaccel()  → double", "inslope()  → double", "interpretaccelasratio(on)", "invalue()  → double", "isaccelinterpretedasratio()  → bool", "isaccelset()  → bool", "isacceltied()  → bool", "isaccelused()  → bool", "isinslopeauto()  → bool", "isslopeauto()  → bool", "isslopeset()  → bool", "isslopetied()  → bool", "isslopeused()  → bool", "isvalueset()  → bool", "isvaluetied()  → bool", "isvalueused()  → bool", "setaccel(accel)", "setinaccel(in_accel)", "setinslope(in_slope)", "setinslopeauto(on)", "setinvalue(in_value)", "setslope(slope)", "setslopeauto(on)", "setvalue(value)", "slope()  → double", "unsetinaccel()", "unsetinslope()", "unsetinvalue()", "useaccel(on)", "useslope(on)", "usevalue(on)", "value()  → double", "ascode(brief=false, save_keys_in_frames=false, function_name=none)  → str", "expression()  → str", "expressionlanguage()  → hou.exprlanguage enum value", "frame()  → double", "isexpressionlanguageset()  → bool", "isexpressionset()  → bool", "istimeset()  → bool", "setexpression(expression, language=none)", "setframe(frame)", "settime(time)", "time()  → double"]}, {"class": "hou.anim", "summary": "Module which contains functions for working with animation utilities.", "functions": ["newbookmark(name, start_frame, end_frame)  → hou.bookmark", "bookmarks()  → tuple of hou.bookmarks", "getbookmark(session_id)  → hou.bookmark", "savebookmarks(filename, bookmarks=none)  → bool ", "loadbookmarks(filename)  → bool", "clearbookmarks()", "removebookmarks(bookmarks)", "addbookmarkschangedcallback(callback)", "removebookmarkschangedcallback(callback)", "getgeometrychannels(collection_name, geometry, channel_names=none)", "setgeometrychannels(collection_name, geometry, channel_names)", "setgeometrychannelsfrompattern(collection_name, geometry, pattern)", "setgeometrychannelpending(collection_name, channel_name, value)", "isgeometrychannelpending(collection_name, channel_name)", "isgeometrychannelpinned(collection_name, channel_name=none)  → bool", "getpinnedgeometrychannels(collection_name)", "addgeometrychannelschangedcallback(collection_name, callback, on_mouse_up=true)", "removegeometrychannelschangedcallback(collection_name, callback, on_mouse_up=true)", "slopemode()  → hou.slopemode", "setslopemode(mode)"]}, {"class": "hou.StringKeyframe", "summary": null, "functions": ["asjson(brief=false, save_keys_in_frames=false)  → dict", "fromjson(keyframe_dict)", "evaluatedtype()  → hou.parmdata enum value", "ascode(brief=false, save_keys_in_frames=false, function_name=none)  → str", "expression()  → str", "expressionlanguage()  → hou.exprlanguage enum value", "frame()  → double", "isexpressionlanguageset()  → bool", "isexpressionset()  → bool", "istimeset()  → bool", "setexpression(expression, language=none)", "setframe(frame)", "settime(time)", "time()  → double"]}, {"class": "hou.bookmarkEvent", "summary": "Enumeration of the bookmark events that can be handled by callback functions.", "functions": []}, {"class": "hou.clipInfo()", "summary": null, "functions": []}, {"class": "hou.createAnimationClip()", "summary": "Creates an Animation Clip Mixer from the parameters in the Channel List.", "functions": []}, {"class": "hou.ik", "summary": "Module containing functions related to inverse kinematics.", "functions": []}, {"class": "hou.createAnimationLayers()", "summary": "Creates an Animation Layer Mixer from the parameters in the Channel List.", "functions": []}, {"class": "hou.segmentType", "summary": "Enumeration of values for segment types used by channel primitives.", "functions": []}, {"class": "hou.removeAnimationLayer()", "summary": "Removes an Animation Layer from an existing Animation Layer Mixer.", "functions": []}, {"class": "hou.slopeMode", "summary": "Enumeration of values for default Slope Mode when inserting new keys into a channel.", "functions": []}]}, {"category": "apex", "items": []}, {"category": "digital assets", "items": []}, {"category": "channels", "items": []}, {"category": "cooking", "items": []}, {"category": "crowds", "items": []}, {"category": "dynamics", "items": []}, {"category": "exceptions", "items": []}, {"category": "file i/o", "items": [{"class": "hou.homeHoudiniDirectory()", "summary": "Return the path to the Houdini directory in your $HOME directory.", "functions": []}]}, {"category": "general", "items": []}, {"category": "geometry", "items": []}, {"category": "images", "items": []}, {"category": "nodes", "items": [{"class": "hou.OpNodeType", "summary": "Information common to all instances of a type of OP node.", "functions": ["instances()  → tuple of hou.node", "sectiondata(section_name)  → str", "binarysectiondata(section_name)  → bytes", "hassectiondata(section_name)  → bool", "definition()  → hou.hdadefinition", "allinstalleddefinitions()  → tuple of hou.hdadefinition", "hdamodule()  → hou.hdamodule", "hdaviewerstatemodule()  → hou.hdaviewerstatemodule", "hdaviewerhandlemodule()  → hou.hdaviewerhandlemodule", "source()  → hou.nodetypesource enum value", "sourcepath()  → str", "sourcenetwork()  → hou.node or none", "uninstallfrompath()", "aliases()  → tuple of str", "addalias(alias)", "removealias(alias)", "hidden()  → bool", "sethidden(hidden)", "deprecated()  → bool", "deprecationinfo()  → dict of str to str or hou.nodetype", "name()  → str", "namecomponents()  → tuple of str", "namewithcategory()  → str", "namespaceorder()  → tuple of str", "description()  → str", "category()  → hou.nodetypecategory", "parmtemplategroup()  → hou.parmtemplategroup", "parmtemplates()  → tuple of hou.parmtemplate", "minnuminputs()  → int", "maxnuminputs()  → int", "maxnumoutputs()  → int", "haseditableinputdata()  → bool", "haspermanentuserdefaults()  → bool", "hasunorderedinputs()  → bool", "isgenerator()  → bool", "ismanager(include_management_types=true)  → bool", "icon()  → str", "isreadable()  → bool", "iswritable()  → bool", "arecontentsviewable()  → bool", "containednodetypes()  → tuple of str", "childtypecategory()  → hou.nodetypecategory or none", "embeddedhelp()  → str", "helpurl()  → str", "defaulthelpurl()  → str", "defaultcolor()  → hou.color", "setdefaultcolor(color)", "defaultshape()  → str", "setdefaultshape(shape)"]}]}, {"category": "node types", "items": []}, {"category": "objects", "items": []}, {"category": "organization", "items": []}, {"category": "parameters", "items": [{"class": "hou.scriptLanguage", "summary": "Enumeration of available script languages.", "functions": []}]}, {"category": "parameter templates", "items": []}, {"category": "performance", "items": []}, {"category": "playbar", "items": []}, {"category": "preferences", "items": []}, {"category": "radial menus", "items": []}, {"category": "rendering", "items": []}, {"category": "scripting", "items": [{"class": "hou.hscriptStringExpression()", "summary": "Evaluate an Hscript expression as a string.", "functions": []}, {"class": "hou.hscriptMatrixExpression()", "summary": "Evaluate an Hscript expression as a matrix.", "functions": []}, {"class": "hou.hscriptVectorExpression()", "summary": "Evaluate an Hscript expression as a vector.", "functions": []}, {"class": "hou.hscriptFloatExpression()", "summary": "Evaluate an Hscript expression as a float.", "functions": []}, {"class": "hou.hscriptExpression()", "summary": "Evaluate an Hscript expression.", "functions": []}, {"class": "hou.hscriptExpandString()", "summary": "Deprecated: Use expandString.", "functions": []}, {"class": "hou.hscriptCommandHelp()", "summary": "Return the text help of an hscript command. This function is used to\nhelp re-implement hscript commands in Python.", "functions": []}, {"class": "hou.incrementNumberedString()", "summary": "Increments the number in a string, or appends a number to the string.", "functions": []}]}, {"category": "shading", "items": []}, {"category": "shelf", "items": []}, {"category": "solaris", "items": []}, {"category": "takes", "items": []}, {"category": "ui", "items": [{"class": "hou.perfMonObjectView", "summary": "Enumeration of the different structures that are used to view objects in the Performance Monitor panetab.", "functions": []}, {"class": "hou.perfMonTimeUnit", "summary": "Enumeration of the different units used when viewing times in the Performance Monitor panetab.", "functions": []}, {"class": "hou.perfMonTimeFormat", "summary": "Enumeration of the different formats used when viewing times in the Performance Monitor panetab.", "functions": []}, {"class": "hou.pypanel", "summary": "Module containing functions related to Python panels.", "functions": ["installfile(file_path)", "interfacebyname(name)  → hou.pythonpanelinterface", "interfacesinfile(file_path)  → tuple of hou.pythonpanelinterface", "interfaces()  → dict of str to hou.pythonpanelinterface", "menuinterfaces()  → tuple of str", "setmenuinterfaces(names)"]}, {"class": "hou.qt", "summary": "Module containing Qt related functions.", "functions": []}, {"class": "hou.parmFilterMode", "summary": "Enumeration of Parameter filter modes.", "functions": []}, {"class": "hou.secureSelectionOption", "summary": "Enumeration of the secure selection options used by viewer state selectors.", "functions": []}, {"class": "hou.scrollPosition", "summary": "Enumeration of scrolling position modes.", "functions": []}, {"class": "hou.parmFilterCriteria", "summary": "Enumeration of Parameter filter criteria.", "functions": []}, {"class": "hou.resourceEventMessage", "summary": "Enumeration of the resource events that can be handled by callback functions.", "functions": []}, {"class": "hou.paneTabType", "summary": "Enumeration of pane tab types.", "functions": []}, {"class": "hou.paneLinkType", "summary": "Enumeration of possible pane link values.", "functions": []}, {"class": "hou.nodeFootprint", "summary": "Enumeration of the specialized node footprints supported by the network editor.", "functions": []}, {"class": "hou.isUIAvailable()", "summary": "Return whether or not the hou.ui module is available.", "functions": []}, {"class": "hou.fileChooserMode", "summary": "Enumeration of possible read/write modes for the file chooser.", "functions": []}, {"class": "hou.drawableTextOrigin", "summary": "Enumeration used with  to specify the reference point of the text within its bounding box.", "functions": []}, {"class": "hou.drawablePrimitive", "summary": "Enumerator for the drawable primitive types.", "functions": []}, {"class": "hou.drawableDisplayMode", "summary": "Enumerator for the drawable display mode.", "functions": []}, {"class": "hou.drawableGeometryPointStyle", "summary": "Enumeration used with  to specify the style of points to draw.", "functions": []}, {"class": "hou.confirmType", "summary": "Enumeration of confirmation dialog suppression options.", "functions": []}, {"class": "hou.SceneGraphTree", "summary": null, "functions": ["showclassprimitives()  → bool", "setshowclassprimitives(show)", "showinactiveprimitives()  → bool", "setshowinactiveprimitives(show)", "showinvisibleprimitives()  → bool", "setshowinvisibleprimitives(show)", "showoverprimitives()  → bool", "setshowoverprimitives(show)", "showprototypeprimitives()  → bool", "setshowprototypeprimitives(show)", "showlayerinfoprimitives()  → bool", "setshowlayerinfoprimitives(show)", "showhiddeninuiprimitives()  → bool", "setshowhiddeninuiprimitives(show)", "allcolumns()  → tuple of str", "visiblecolumns()  → tuple of str", "setvisiblecolumns(columns)", "filterpattern()  → str", "setfilterpattern(pattern)", "expandedprimitives(include_leaf_primitives=false)  → list of pxr.sdf.path", "collapseprimitives(paths)", "expandprimitives(paths, collapse_others=false, expand_leaf_primitives=false)", "splitposition()  → float", "setsplitposition(position)", "collectionprimitives()  → str", "setcollectionprimitives(pattern)", "collectionfilterpattern()  → str", "setcollectionfilterpattern(pattern)", "tabs()  → tuple of hou.panetab", "taboftype(type, index=0)  → hou.panetab or none", "currenttab()  → hou.panetab", "createtab(type)  → hou.panetab", "splithorizontally()  → hou.pane", "splitvertically()  → hou.pane", "desktop()  → hou.desktop or none", "ismaximized()  → bool", "setismaximized(on)", "getsplitparent()  → hou.pane or none", "getsplitchild(self,index)  → hou.pane or none", "splitswap()", "splitrotate()", "issplitminimized()  → bool", "issplitmaximized()  → bool", "setissplitmaximized(on)  → bool", "issplit()  → bool", "setsplitfraction(self,fraction)", "getsplitfraction(self,fraction)  → double", "setsplitdirection(self,dir)", "getsplitdirection(self,dir)  → double", "isshowingpanetabs()  → bool", "setshowpanetabs(self,on)", "showpanetabs(self,on)", "isshowingpanetabsstow()  → bool", "showpanetabsstow(self,on)", "qtparentwindow()  → qwidget", "qtscreengeometry()  → qrect"]}, {"class": "hou.severityType", "summary": "Enumeration of dialog message severities.", "functions": []}]}, {"category": "utility", "items": []}, {"category": "vex", "items": []}, {"category": "views", "items": [{"class": "hou.TextDrawable", "summary": "A drawable object to render text in the viewport.", "functions": ["__init__(scene_viewer, name, label=none, params=none)", "size(text)  → tuple of double", "name()", "label()", "setlabel(label)", "show(value)", "visible()  → bool", "settransform(xform)", "transform():  → hou.matrix4", "setparams(params)", "draw(handle, params=none)"]}, {"class": "hou.UIEvent", "summary": "Represents a user interface event, such as a mouse press. You can access this object in an event handler to respond to user input.", "functions": ["device()  → hou.uieventdevice", "hasqueuedevents()  → bool", "queuedevents()  → list of hou.uieventdevice", "value()  → obj", "valuetype()  → hou.uieventvaluetype", "reason()  → hou.uieventreason"]}, {"class": "hou.UIEventDevice", "summary": "Object containing methods for testing input-device-specific information on a UI event, such as which mouse button was pressed.", "functions": ["time():  → double", "isaltkey()  → bool", "isautorepeat()  → bool", "iscapslock()  → bool", "isctrlkey()  → bool", "iskeypad()  → bool", "isshiftkey()  → bool", "isarrowdown()  → bool", "isarrowleft()  → bool", "isarrowright()  → bool", "isarrowup()  → bool", "isfunctionkey()  → bool", "iskeypressed()  → bool", "iskeydown()  → bool", "iskeyup()  → bool", "keyvalue()  → int", "keystring()  → string", "modifierstring()  → string", "isleftbutton()  → bool", "ismiddlebutton()  → bool", "isrightbutton()  → bool", "isleftbuttonreleased()  → bool", "ismiddlebuttonreleased()  → bool", "isrightbuttonreleased()  → bool", "mousex()  → int", "mousey()  → int", "mousewheel()  → int", "istablet()  → bool", "tabletangle()  → double", "tabletpressure()  → double", "tabletroll()  → double", "tablettilt()  → double"]}, {"class": "hou.SimpleDrawable", "summary": "Represents extra geometry to draw in the viewer alongside user content (for example, as guide geometry).", "functions": ["__init__(scene_viewer, geometry, name)", "enable(self,value)", "enabled(self,value)  → bool", "setdisplaymode(mode)", "displaymode():  → hou.drawabledisplaymode", "setxray(value)", "isxray():  → bool", "setshowmaterials(value)", "isshowmaterials():  → bool", "setcastshadows(value)", "iscastshadows():  → bool", "setwireframecolor(color)", "setgeometry(geometry)", "geometry():  → hou.geometry", "setvisibleinviewport(viewport)", "setvisibleinallviewports()", "isvisibleinviewport(viewport)  → bool", "setdrawoutline(value)", "isdrawoutline():  → bool", "setoutlinecolor(color)", "outlinecolor()  → hou.vector4", "setseparateoutline(value)", "isseparateoutline():  → bool", "setoutlineonly(value)", "isoutlineonly():  → bool", "name()", "label()", "setlabel(label)", "show(value)", "visible()  → bool", "settransform(xform)", "transform():  → hou.matrix4"]}, {"class": "hou.Selector", "summary": "Describes how Houdini should prompt the user to choose geometry in the\nviewport when creating a new SOP node instance.", "functions": ["nodetype()  → hou.nodetype", "destroy()", "name()  → str", "selectortype()  → str", "prompt()  → str", "primitivetypes()  → tuple of hou.primtype enum values", "groupparmname()  → str", "grouptypeparmname()  → str", "inputindex()  → int", "inputrequired()  → bool", "allowdragging()  → bool", "emptystringselectsall()  → bool", "extrainfo()  → str", "geometrytypes() -> tuple of hou.geometrytype enum values", "grouptypeparmvalues()  → tuple of int", "ordered()  → bool"]}]}, {"category": "viewer", "items": []}, {"category": "webserver", "items": []}]},
{"title": "hou package", "categories": [{"category": "animation", "items": []}, {"category": "apex", "items": []}, {"category": "digital assets", "items": []}, {"category": "channels", "items": []}, {"category": "cooking", "items": []}, {"category": "crowds", "items": []}, {"category": "dynamics", "items": []}, {"category": "exceptions", "items": []}, {"category": "file i/o", "items": []}, {"category": "general", "items": []}, {"category": "geometry", "items": []}, {"category": "images", "items": []}, {"category": "nodes", "items": []}, {"category": "node types", "items": []}, {"category": "objects", "items": []}, {"category": "organization", "items": []}, {"category": "parameters", "items": []}, {"category": "parameter templates", "items": []}, {"category": "performance", "items": []}, {"category": "playbar", "items": []}, {"category": "preferences", "items": []}, {"category": "radial menus", "items": []}, {"category": "rendering", "items": []}, {"category": "scripting", "items": []}, {"category": "shading", "items": []}, {"category": "shelf", "items": []}, {"category": "solaris", "items": []}, {"category": "takes", "items": []}, {"category": "ui", "items": []}, {"category": "utility", "items": []}, {"category": "vex", "items": []}, {"category": "views", "items": []}, {"category": "viewer", "items": []}, {"category": "webserver", "items": []}]}
]